# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: golang
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: go get
        code: |
          go get

    # Build the project
    - script:
        name: go build
        code: |
          go build ./...

    # Test the project
    - script:
        name: go test
        code: |
          go test ./...

    # Create croc-hunter-controller.json only for initialization
    - script:
        name: create croc-hunter-controller.json
        code: ./create_croc-hunter-controller.json.sh

    # Copy binary to a location that gets passed along to the deploy pipeline
    - script:
        name: copy binary
        code: cp croc-hunter croc-hunter-service.json croc-hunter-controller.json "$WERCKER_OUTPUT_DIR"

deploy:
    box: google/golang
    steps:
     # Use the scratch step to build a container from scratch based on the files present
    - internal/docker-scratch-push:
      username: $QUAY_USERNAME
      password: $QUAY_PASSWORD
      cmd: ./croc-hunter
      tag: ${TPL_ENVIRONMENT:-release}-$WERCKER_GIT_COMMIT
      ports: "8080"
      repository: quay.io/flywire/croc-hunter
      registry: https://quay.io

    - script:
      name: copy credentials
      cwd: deployment
      code: echo "$KUBERNETES_CA" | base64 --decode > ca.pem

    # Run this to create the rc and service
    - script:
      name: generate kube file
      cwd: deployment
      code: |
        cat todo-service.yml >> todo-kube.yml
        ./t.sh todo-deployment.template.yml >> todo-kube.yml
        cat todo-kube.yml

    - kubectl:
      cwd: deployment
      server: $KUBERNETES_MASTER
      certificate-authority: ca.pem
      token: $KUBERNETES_TOKEN
      command: apply -f todo-kube.yml

    - kubectl:
      server: $KUBERNETES_MASTER
      certificate-authority: ca.pem
      token: $KUBERNETES_TOKEN
      command: rolling-update croc-hunter
      image: quay.io/flywire/croc-hunter:$WERCKER_GIT_COMMIT

    - script:
      name: cleanup
      cwd: deployment
      code: rm -rf ca.pem todo-kube.yml
